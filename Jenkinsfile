pipeline {
    agent any
    
    stages {
        stage('Clone repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Ichrak-dhahri/ShopFer.git'
            }
        }
        
        stage('Install dependencies') {
            steps {
                bat 'call npm install'
            }
        }
        
        stage('Run unit tests') {
            steps {
                bat 'call npm run test -- --karma-config karma.conf.js --watch=false --code-coverage'
            }
        }
        
        stage('Build Angular Application') {
            steps {
                bat 'call npm run build'
            }
        }
        
        stage('Start Angular Application') {
            steps {
                // D√©marrer l'application Angular en arri√®re-plan de fa√ßon plus robuste
                bat '''
                    echo D√©marrage de l application Angular...
                    start "Angular App" /min cmd /c "npm run start"
                    echo Attente du d√©marrage de l application...
                '''
                
                // Attendre que l'application soit disponible avec une v√©rification
                script {
                    def maxAttempts = 30
                    def attempt = 0
                    def appStarted = false
                    
                    while (attempt < maxAttempts && !appStarted) {
                        try {
                            sleep(2)
                            bat 'netstat -an | find "4200" | find "LISTENING"'
                            appStarted = true
                            echo "‚úÖ Application Angular d√©marr√©e sur le port 4200"
                        } catch (Exception e) {
                            attempt++
                            echo "Tentative ${attempt}/${maxAttempts} - Application pas encore pr√™te..."
                        }
                    }
                    
                    if (!appStarted) {
                        error("‚ùå L'application Angular n'a pas pu d√©marrer dans le d√©lai imparti")
                    }
                }
            }
        }
        
        stage('Setup Robot Framework Environment') {
            steps {
                echo "Configuration de l'environnement Robot Framework..."
                
                // Cr√©er le r√©pertoire s'il n'existe pas
                bat '''
                    if not exist robot-tests mkdir robot-tests
                    cd robot-tests
                '''
                
                // Cr√©er l'environnement virtuel
                bat '''
                    cd robot-tests
                    if exist robot_env rmdir /s /q robot_env
                    python -m venv robot_env
                '''
                
                // Mettre √† jour pip et installer les d√©pendances
                bat '''
                    cd robot-tests
                    robot_env\\Scripts\\python.exe -m pip install --upgrade pip
                    robot_env\\Scripts\\pip install robotframework
                    robot_env\\Scripts\\pip install robotframework-seleniumlibrary
                    robot_env\\Scripts\\pip install selenium
                    robot_env\\Scripts\\pip install webdriver-manager
                '''
                
                echo "‚úÖ Environnement Robot Framework configur√©"
            }
        }
        
        stage('Verify Application Status') {
            steps {
                echo "V√©rification du statut de l'application..."
                bat '''
                    echo √âtat des processus Node.js:
                    tasklist | find "node.exe" || echo Aucun processus Node.js trouv√©
                    echo.
                    echo Ports en √©coute:
                    netstat -an | find "4200" || echo Port 4200 non trouv√©
                    echo.
                    echo Test de connectivit√© HTTP:
                    curl -f http://localhost:4200 || echo Connexion √©chou√©e
                '''
            }
        }
        
        stage('Run Robot Framework tests') {
            steps {
                echo "Ex√©cution des tests Robot Framework..."
                
                // Ex√©cuter les tests
                bat '''
                    cd robot-tests
                    robot_env\\Scripts\\robot --outputdir . ^
                                              --variable BROWSER:headlesschrome ^
                                              --variable URL:http://localhost:4200 ^
                                              --loglevel INFO ^
                                              hello.robot
                '''
            }
        }
        
        stage('Stop Angular Application') {
            steps {
                echo "Arr√™t de l'application Angular avant la conteneurisation..."
                bat '''
                    echo Arr√™t des processus Node.js sur le port 4200...
                    for /f "tokens=5" %%a in ('netstat -aon 2^>nul ^| find ":4200" ^| find "LISTENING"') do (
                        echo Arr√™t du processus %%a
                        taskkill /f /pid %%a 2>nul || echo Processus %%a d√©j√† arr√™t√©
                    )
                    
                    echo Arr√™t de tous les processus npm et node...
                    taskkill /f /im node.exe 2>nul || echo Aucun processus node.exe
                    taskkill /f /im npm.cmd 2>nul || echo Aucun processus npm.cmd
                    
                    echo Application Angular arr√™t√©e
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo "Construction de l'image Docker..."
                bat 'docker build -t shopferimgg .'
                echo "‚úÖ Image Docker 'shopferimgg' cr√©√©e avec succ√®s"
            }
        }
        
        stage('Clean up existing Docker containers') {
            steps {
                echo "Nettoyage des conteneurs Docker existants..."
                script {
                    try {
                        bat '''
                            echo Nettoyage des conteneurs existants...
                            docker stop shopfer-container 2>nul || echo Aucun conteneur √† arr√™ter
                            docker rm shopfer-container 2>nul || echo Aucun conteneur √† supprimer
                            
                            echo Lib√©ration du port 4200...
                            for /f "tokens=5" %%a in ('netstat -aon 2^>nul ^| find ":4200" ^| find "LISTENING"') do (
                                taskkill /f /pid %%a 2>nul || echo Port 4200 d√©j√† libre
                            )
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Nettoyage termin√© avec avertissements"
                    }
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                echo "D√©marrage du conteneur Docker..."
                script {
                    try {
                        bat 'docker run -d -p 4200:80 --name shopfer-container shopferimgg'
                        echo "‚úÖ Conteneur Docker d√©marr√©"
                        
                        // V√©rifier que le conteneur fonctionne
                        def maxAttempts = 15
                        def attempt = 0
                        def containerRunning = false
                        
                        while (attempt < maxAttempts && !containerRunning) {
                            try {
                                sleep(3)
                                bat 'docker ps | find "shopfer-container"'
                                containerRunning = true
                                echo "‚úÖ Conteneur Docker fonctionne correctement"
                            } catch (Exception e) {
                                attempt++
                                echo "Tentative ${attempt}/${maxAttempts} - V√©rification du conteneur..."
                            }
                        }
                        
                        if (!containerRunning) {
                            echo "‚ö†Ô∏è Le conteneur pourrait avoir des probl√®mes. V√©rification des logs..."
                            bat 'docker logs shopfer-container || echo Pas de logs disponibles'
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur lors du d√©marrage du conteneur: ${e.getMessage()}"
                        bat 'docker logs shopfer-container 2>nul || echo Pas de logs disponibles'
                        throw e
                    }
                }
                
                echo "üê≥ Application ShopFer d√©ploy√©e dans le conteneur Docker"
            }
        }
    }
    
    post {
        always {
            echo "Nettoyage des ressources..."
            
            script {
                try {
                    // Arr√™ter l'application Angular
                    bat '''
                        echo Arr√™t des processus Node.js...
                        for /f "tokens=5" %%a in ('netstat -aon 2^>nul ^| find ":4200" ^| find "LISTENING"') do (
                            taskkill /f /pid %%a 2>nul || echo Processus %%a d√©j√† arr√™t√©
                        )
                        
                        taskkill /f /im node.exe 2>nul || echo Aucun processus node.exe
                        taskkill /f /im npm.cmd 2>nul || echo Aucun processus npm.cmd
                        exit /b 0
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Nettoyage des processus Node.js termin√© avec avertissements"
                }
                
                // Publication des r√©sultats Robot Framework
                try {
                    robot(
                        outputPath: 'robot-tests',
                        outputFileName: 'output.xml',
                        reportFileName: 'report.html',
                        logFileName: 'log.html',
                        disableArchiveOutput: false,
                        passThreshold: 80,
                        unstableThreshold: 60,
                        otherFiles: '*.png,*.jpg'
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Erreur lors de la publication des r√©sultats Robot: ${e.getMessage()}"
                }
                
                // Archiver les artefacts
                try {
                    archiveArtifacts artifacts: 'robot-tests/**/*.{xml,html,log,png,jpg}', allowEmptyArchive: true, fingerprint: true
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Erreur lors de l'archivage: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s.'
            echo 'üê≥ Application ShopFer disponible via Docker sur http://localhost:4200'
        }
        
        failure {
            echo '‚ùå Pipeline √©chou√©.'
            
            script {
                try {
                    // Diagnostic en cas d'√©chec
                    bat '''
                        echo === DIAGNOSTIC ===
                        echo √âtat du conteneur Docker:
                        docker ps -a | find "shopfer-container" || echo Aucun conteneur trouv√©
                        echo.
                        echo Logs du conteneur:
                        docker logs shopfer-container 2>nul || echo Pas de logs disponibles
                        echo.
                        echo Images Docker:
                        docker images | find "shopferimgg" || echo Image non trouv√©e
                        echo.
                        echo Contenu du r√©pertoire robot-tests:
                        if exist robot-tests dir robot-tests
                        echo.
                        echo === FIN DIAGNOSTIC ===
                    '''
                    
                    // Nettoyer les conteneurs en cas d'√©chec
                    bat '''
                        echo Nettoyage des conteneurs Docker...
                        docker stop shopfer-container 2>nul || echo Aucun conteneur √† arr√™ter
                        docker rm shopfer-container 2>nul || echo Aucun conteneur √† supprimer
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Diagnostic termin√© avec avertissements"
                }
            }
        }
        
        cleanup {
            echo "Nettoyage final..."
            script {
                try {
                    bat '''
                        echo Arr√™t du conteneur Docker...
                        docker stop shopfer-container 2>nul || echo Conteneur d√©j√† arr√™t√©
                        docker rm shopfer-container 2>nul || echo Conteneur d√©j√† supprim√©
                        echo Nettoyage Docker termin√©
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Nettoyage final termin√©"
                }
            }
        }
    }
}