pipeline {
    agent any
    
    stages {
        stage('Clone repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Ichrak-dhahri/ShopFer.git'
            }
        }
        
        stage('Install dependencies') {
            steps {
                bat 'call npm install'
            }
        }
        
        stage('Run unit tests') {
            steps {
                bat 'call npm run test -- --karma-config karma.conf.js --watch=false --code-coverage'
            }
        }
        
        stage('Build Angular Application') {
            steps {
                bat 'call npm run build'
            }
        }
        
        stage('Check Docker Status') {
            steps {
                echo "V√©rification du statut de Docker..."
                script {
                    try {
                        bat 'docker --version'
                        bat 'docker info'
                        echo "‚úÖ Docker est disponible et fonctionnel"
                    } catch (Exception e) {
                        echo "‚ùå Erreur Docker: ${e.getMessage()}"
                        echo "üîß Tentative de d√©marrage de Docker Desktop..."
                        
                        // Tentative de d√©marrage de Docker Desktop
                        bat '''
                            echo D√©marrage de Docker Desktop...
                            start "" "C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe" || echo Docker Desktop non trouv√© dans le chemin par d√©faut
                            timeout /t 30 /nobreak
                            docker info || echo Docker toujours non disponible
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        echo "Construction de l'image Docker..."
                        bat 'docker build -t shopferimgg .'
                        echo "‚úÖ Image Docker construite avec succ√®s"
                    } catch (Exception e) {
                        echo "‚ùå √âchec de la construction Docker: ${e.getMessage()}"
                        error("Impossible de construire l'image Docker. V√©rifiez que Docker est d√©marr√©.")
                    }
                }
            }
        }
        
        stage('Push Docker Image to Docker Hub') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                
                withCredentials([usernamePassword(credentialsId: 'docker-hub-login', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                    script {
                        try {
                            bat """
                                echo Tagging Docker image...
                                docker tag shopferimgg %DOCKER_HUB_USER%/shopferimgg:latest
                                
                                echo Logging in to Docker Hub...
                                docker login -u %DOCKER_HUB_USER% -p %DOCKER_HUB_PASS%
                                
                                echo Pushing image to Docker Hub...
                                docker push %DOCKER_HUB_USER%/shopferimgg:latest
                                
                                echo ‚úÖ Image pushed successfully to Docker Hub
                            """
                        } catch (Exception e) {
                            echo "‚ùå √âchec du push vers Docker Hub: ${e.getMessage()}"
                            error("Impossible de pousser l'image vers Docker Hub")
                        }
                    }
                }
            }
            post {
                success {
                    echo "‚úÖ Docker image successfully pushed to Docker Hub as farahabbes/shopferimgg:latest"
                }
                failure {
                    echo "‚ùå Failed to push Docker image to Docker Hub"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                script {
                    try {
                        echo "D√©marrage du conteneur Docker..."
                        bat 'docker run -d -p 4200:4200 --name shopfer-container shopferimgg'
                        echo "‚úÖ Conteneur Docker d√©marr√© avec succ√®s"
                    } catch (Exception e) {
                        echo "‚ùå √âchec du d√©marrage du conteneur: ${e.getMessage()}"
                        // Continuer sans faire √©chouer le pipeline
                        echo "‚ö†Ô∏è Continuation sans conteneur Docker"
                    }
                }
            }
        }
        
        stage('Verify Application Status') {
            steps {
                echo "V√©rification du statut de l'application Docker..."
                
                script {
                    def maxAttempts = 30
                    def attempt = 0
                    def appStarted = false
                    
                    while (attempt < maxAttempts && !appStarted) {
                        try {
                            sleep(2)
                            bat 'netstat -an | find "4200" | find "LISTENING"'
                            appStarted = true
                            echo "‚úÖ Application Angular d√©marr√©e sur le port 4200"
                        } catch (Exception e) {
                            attempt++
                            echo "Tentative ${attempt}/${maxAttempts} - Application pas encore pr√™te..."
                        }
                    }
                    
                    if (!appStarted) {
                        echo "‚ö†Ô∏è L'application n'est pas accessible sur le port 4200"
                        echo "Cela peut √™tre normal si Docker n'est pas disponible"
                    }
                }
                
                script {
                    try {
                        bat '''
                            echo √âtat des conteneurs Docker:
                            docker ps | find "shopfer-container" || echo Aucun conteneur shopfer-container trouv√©
                            echo.
                            echo Ports en √©coute:
                            netstat -an | find "4200" || echo Port 4200 non trouv√©
                            echo.
                            echo Test de connectivit√© HTTP (si possible):
                            curl -f http://localhost:4200 || echo Connexion non disponible
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è V√©rification partielle - Docker peut ne pas √™tre disponible"
                    }
                }
            }
        }
        
        stage('Setup Robot Framework Environment') {
            steps {
                echo "Configuration de l'environnement Robot Framework..."
                
                bat '''
                    if not exist robot-tests mkdir robot-tests
                    cd robot-tests
                '''
                
                bat '''
                    cd robot-tests
                    if exist robot_env rmdir /s /q robot_env
                    python -m venv robot_env
                '''
                
                bat '''
                    cd robot-tests
                    robot_env\\Scripts\\python.exe -m pip install --upgrade pip
                    robot_env\\Scripts\\pip install robotframework
                    robot_env\\Scripts\\pip install robotframework-seleniumlibrary
                    robot_env\\Scripts\\pip install selenium
                    robot_env\\Scripts\\pip install webdriver-manager
                '''
                
                echo "‚úÖ Environnement Robot Framework configur√©"
            }
        }
        
        stage('Run Robot Framework tests') {
            steps {
                echo "Ex√©cution des tests Robot Framework..."
                
                script {
                    try {
                        bat '''
                            cd robot-tests
                            robot_env\\Scripts\\robot --outputdir . ^
                                                      --variable BROWSER:headlesschrome ^
                                                      --variable URL:http://localhost:4200 ^
                                                      --loglevel INFO ^
                                                      hello.robot
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Tests Robot Framework √©chou√©s: ${e.getMessage()}"
                        echo "Cela peut √™tre d√ª √† l'indisponibilit√© de l'application sur le port 4200"
                        // Marquer comme instable plut√¥t que comme √©chec complet
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Nettoyage des ressources..."
            
            script {
                try {
                    // Nettoyage Docker avec syntaxe corrig√©e
                    bat '''
                        echo Arr√™t et suppression du conteneur shopfer-container...
                        docker stop shopfer-container 2>nul || echo Conteneur shopfer-container non trouv√©
                        docker rm shopfer-container 2>nul || echo Conteneur shopfer-container d√©j√† supprim√©
                        
                        echo Nettoyage des conteneurs orphelins...
                        for /f %%i in ('docker ps -q --filter "ancestor=shopferimgg" 2^>nul') do (
                            echo Arr√™t du conteneur %%i
                            docker stop %%i 2>nul
                            docker rm %%i 2>nul
                        )
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Nettoyage Docker non effectu√© (Docker peut ne pas √™tre disponible): ${e.getMessage()}"
                }
                
                try {
                    bat '''
                        echo Nettoyage des processus Node.js restants...
                        for /f "tokens=5" %%a in ('netstat -aon 2^>nul ^| find ":4200" ^| find "LISTENING"') do (
                            echo Arr√™t du processus %%a
                            taskkill /f /pid %%a 2>nul || echo Processus %%a d√©j√† arr√™t√©
                        )
                        
                        echo Nettoyage termin√©
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Nettoyage des processus partiellement effectu√©: ${e.getMessage()}"
                }
            }
            
            // Publication des r√©sultats Robot Framework avec gestion d'erreur am√©lior√©e
            script {
                try {
                    if (fileExists('robot-tests/output.xml')) {
                        robot(
                            outputPath: 'robot-tests',
                            outputFileName: 'output.xml',
                            reportFileName: 'report.html',
                            logFileName: 'log.html',
                            disableArchiveOutput: false,
                            passThreshold: 80,
                            unstableThreshold: 60,
                            otherFiles: '*.png,*.jpg'
                        )
                    } else {
                        echo "‚ö†Ô∏è Aucun fichier de r√©sultats Robot Framework trouv√©"
                    }
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Erreur lors de la publication des r√©sultats Robot: ${e.getMessage()}"
                }
            }
            
            // Archiver les artefacts
            script {
                try {
                    archiveArtifacts artifacts: 'robot-tests/**/*.{xml,html,log,png,jpg}', allowEmptyArchive: true, fingerprint: true
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Erreur lors de l'archivage: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s.'
        }
        
        failure {
            echo '‚ùå Pipeline √©chou√©.'
            
            script {
                try {
                    bat '''
                        echo === DIAGNOSTIC ===
                        echo √âtat des conteneurs Docker:
                        docker ps -a 2>nul | find "shopfer" || echo Aucun conteneur shopfer
                        echo.
                        echo √âtat des processus Node.js:
                        tasklist | find "node.exe" || echo Aucun processus Node.js
                        echo.
                        echo Ports en √©coute:
                        netstat -an | find "4200" || echo Port 4200 non trouv√©
                        echo.
                        echo Contenu du r√©pertoire robot-tests:
                        if exist robot-tests dir robot-tests
                        echo.
                        echo === FIN DIAGNOSTIC ===
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Diagnostic partiel: ${e.getMessage()}"
                }
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline termin√© avec des avertissements.'
        }
    }
}